#include "SoundArtistMainWindow.h"SoundArtistMainWindow::SoundArtistMainWindow( wxWindow* parent ):MainWindow( parent ){    // Common Properties    m_pg->Append( new wxPropertyCategory(wxT("Common Properties")));    wxPGProperty* prop_start = m_pg->Append( new wxFloatProperty("Start (ms)", "StartTime", 0 ) );    prop_start->SetHelpString("The point in the file, in milliseconds, where the plots will begin.");    wxPGProperty* prop_end = m_pg->Append( new wxFloatProperty("End (ms)", "EndTime", 0 ) );    prop_end->SetHelpString("The point in the file, in milliseconds, where the plots will end.");    wxArrayString arrTimeAxis;    arrTimeAxis.Add("Milliseconds (ms)");    arrTimeAxis.Add("Seconds (s)");    m_pg->Append( new wxEnumProperty( "Time Axis", "TimeAxis", arrTimeAxis ));    // Waveform Properties    m_pg->Append( new wxPropertyCategory(wxT("Wave Form Properties")));    m_pg->Append( new wxBoolProperty("Show Y-Values") );    // Spectrogram Properties    m_pg->Append( new wxPropertyCategory(wxT("Spectrogram Properties")));    wxArrayString arrFreqAxis;    arrFreqAxis.Add("Hz");    arrFreqAxis.Add("kHz");    m_pg->Append( new wxEnumProperty( "Frequency Axis", "FreqAxis", arrFreqAxis ));	// Setup PNG Image Handler	wxInitAllImageHandlers();	}void SoundArtistMainWindow::OnOpen( wxCommandEvent& event ){	wxFileDialog* OpenDialog = new wxFileDialog(			this, "Select a WAV file to open", wxEmptyString, wxEmptyString,			"WAV Files (*.wav)|*.wav",			wxFD_OPEN, wxDefaultPosition);	if (OpenDialog->ShowModal() == wxID_OK)	{		wxString CurrentDocPath = OpenDialog->GetPath();		if (m_wr.openFile(CurrentDocPath))		{			SetTitle(wxString("SoundArtist - ") << OpenDialog->GetFilename());			m_samplerateLabel->SetLabel(wxString::Format(wxT("%i Hz"),m_wr.samplerate));			m_durationLabel->SetLabel(wxString::Format(wxT("%f ms"),1000*m_wr.frames/(float)m_wr.samplerate));			m_pg->SetPropertyValue("EndTime", 1000*m_wr.frames/(float)m_wr.samplerate);			// Ensure image is resized			m_wfWidth = 0;			m_wfHeight = 0;			m_haveImages = false;			wxClientDC dc(m_panelWaveform);			dc.Clear();			dc.DrawText("Generating Wave Form Image...", 0, 0);			Refresh();			Update();			this->updateWaveForm();		}	}	OpenDialog->Destroy();}void SoundArtistMainWindow::OnQuit( wxCommandEvent& event ){    Close(true);}void SoundArtistMainWindow::updateWaveForm(){	WR_WFINFO info;	info.quality = 0.5;	if (m_pg->GetPropertyValueAsString("TimeAxis") == "Seconds (s)") {		info.timeaxis = WR_WFINFO::seconds;	} else {		info.timeaxis = WR_WFINFO::milliseconds;	}	info.ylabels = true;	info.lwidth = 0.1;	info.width = 20;	info.height = 10;	info.start = 0;	info.end = m_pg->GetPropertyValueAsDouble("EndTime");	wxString tmpFile = wxFileName::CreateTempFileName("soundartist");	if (m_wr.makeWaveForm(tmpFile, &info))	{		if (wxFileName::FileExists(wxString(tmpFile) << ".png"))		{			m_waveformImage = wxImage(wxString(tmpFile) << ".png");			m_waveformBitmap = wxBitmap(m_waveformImage);			m_haveImages = true;			Refresh();			Update();		}	}	cleanTmpFiles(tmpFile);}void SoundArtistMainWindow::OnWaveformResize( wxSizeEvent& event ){	Refresh();	event.Skip();}void SoundArtistMainWindow::OnWaveformPaint( wxPaintEvent & evt ){	if (!m_haveImages) {		return;	}	wxClientDC dc(m_panelWaveform);	int neww, newh;	dc.GetSize( &neww, &newh );	if( neww != m_wfWidth || newh != m_wfHeight)	{		m_waveformBitmap = wxBitmap(m_waveformImage.Scale(neww, newh));		m_wfWidth = neww;		m_wfHeight = newh;		dc.DrawBitmap(m_waveformBitmap, 0, 0, false);	} else {		dc.DrawBitmap(m_waveformBitmap, 0, 0, false);	}}void SoundArtistMainWindow::cleanTmpFiles(wxFileName filename){	// Clean up the temporary files we may have created.    wxRemoveFile(filename.GetFullPath());	    wxRemoveFile(filename.GetFullPath()<<".dat");	    wxRemoveFile(filename.GetFullPath()<<".gle");	    wxRemoveFile(filename.GetFullPath()<<".png");	    wxRemoveFile(filename.GetFullPath()<<".z");	}